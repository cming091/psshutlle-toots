# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from psgrpc.processflowengine import processflowengine_pb2 as processflowengine__pb2


class ProcessFlowEngineServiceStub(object):
    """ProcessFlowEngine engine message channel
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateActionChain = channel.unary_unary(
                '/processflowengine.ProcessFlowEngineService/CreateActionChain',
                request_serializer=processflowengine__pb2.CreateActionChainRequest.SerializeToString,
                response_deserializer=processflowengine__pb2.GeneralResponse.FromString,
                )
        self.NoticeWorkOrderChain = channel.unary_unary(
                '/processflowengine.ProcessFlowEngineService/NoticeWorkOrderChain',
                request_serializer=processflowengine__pb2.WorkOrderChainRequest.SerializeToString,
                response_deserializer=processflowengine__pb2.GeneralResponse.FromString,
                )
        self.NoticeWorkOrderCancel = channel.unary_unary(
                '/processflowengine.ProcessFlowEngineService/NoticeWorkOrderCancel',
                request_serializer=processflowengine__pb2.WorkOrderRequest.SerializeToString,
                response_deserializer=processflowengine__pb2.GeneralResponse.FromString,
                )
        self.CreateActionAgg = channel.unary_unary(
                '/processflowengine.ProcessFlowEngineService/CreateActionAgg',
                request_serializer=processflowengine__pb2.CreateActionAggRequest.SerializeToString,
                response_deserializer=processflowengine__pb2.GeneralResponse.FromString,
                )
        self.ResetActAggByWO = channel.unary_unary(
                '/processflowengine.ProcessFlowEngineService/ResetActAggByWO',
                request_serializer=processflowengine__pb2.WorkOrderRequest.SerializeToString,
                response_deserializer=processflowengine__pb2.GeneralResponse.FromString,
                )
        self.ListWOByTask = channel.unary_unary(
                '/processflowengine.ProcessFlowEngineService/ListWOByTask',
                request_serializer=processflowengine__pb2.TaskParamRequest.SerializeToString,
                response_deserializer=processflowengine__pb2.WorkOrderResponse.FromString,
                )
        self.ExecuteCheck = channel.unary_unary(
                '/processflowengine.ProcessFlowEngineService/ExecuteCheck',
                request_serializer=processflowengine__pb2.ExeCheckRequest.SerializeToString,
                response_deserializer=processflowengine__pb2.GeneralResponse.FromString,
                )
        self.ExecuteLoadBalance = channel.unary_unary(
                '/processflowengine.ProcessFlowEngineService/ExecuteLoadBalance',
                request_serializer=processflowengine__pb2.ExeLoadBalanceRequest.SerializeToString,
                response_deserializer=processflowengine__pb2.GeneralResponse.FromString,
                )
        self.ExecuteChoice = channel.unary_unary(
                '/processflowengine.ProcessFlowEngineService/ExecuteChoice',
                request_serializer=processflowengine__pb2.ExeChoiceRequest.SerializeToString,
                response_deserializer=processflowengine__pb2.GeneralResponse.FromString,
                )
        self.ExecuteCounting = channel.unary_unary(
                '/processflowengine.ProcessFlowEngineService/ExecuteCounting',
                request_serializer=processflowengine__pb2.ExeCountingRequest.SerializeToString,
                response_deserializer=processflowengine__pb2.GeneralResponse.FromString,
                )
        self.ExecuteMove = channel.unary_unary(
                '/processflowengine.ProcessFlowEngineService/ExecuteMove',
                request_serializer=processflowengine__pb2.MoveActAgg.SerializeToString,
                response_deserializer=processflowengine__pb2.GeneralResponse.FromString,
                )
        self.BatchExecuteMove = channel.unary_unary(
                '/processflowengine.ProcessFlowEngineService/BatchExecuteMove',
                request_serializer=processflowengine__pb2.BatchExecuteMoveRequest.SerializeToString,
                response_deserializer=processflowengine__pb2.GeneralResponse.FromString,
                )
        self.ExecuteIBLoad = channel.unary_unary(
                '/processflowengine.ProcessFlowEngineService/ExecuteIBLoad',
                request_serializer=processflowengine__pb2.ExeIBLoadRequest.SerializeToString,
                response_deserializer=processflowengine__pb2.GeneralResponse.FromString,
                )
        self.ExecuteLoad = channel.unary_unary(
                '/processflowengine.ProcessFlowEngineService/ExecuteLoad',
                request_serializer=processflowengine__pb2.ExeLoadRequest.SerializeToString,
                response_deserializer=processflowengine__pb2.GeneralResponse.FromString,
                )
        self.ExecuteExchange = channel.unary_unary(
                '/processflowengine.ProcessFlowEngineService/ExecuteExchange',
                request_serializer=processflowengine__pb2.ExeExchangeRequest.SerializeToString,
                response_deserializer=processflowengine__pb2.GeneralResponse.FromString,
                )
        self.ExecuteExchangeThenLoad = channel.unary_unary(
                '/processflowengine.ProcessFlowEngineService/ExecuteExchangeThenLoad',
                request_serializer=processflowengine__pb2.ExeExchangeThenLoadRequest.SerializeToString,
                response_deserializer=processflowengine__pb2.GeneralResponse.FromString,
                )
        self.ExecuteLog = channel.unary_unary(
                '/processflowengine.ProcessFlowEngineService/ExecuteLog',
                request_serializer=processflowengine__pb2.ExeLogRequest.SerializeToString,
                response_deserializer=processflowengine__pb2.GeneralResponse.FromString,
                )
        self.ExecuteExceptionHandler = channel.unary_unary(
                '/processflowengine.ProcessFlowEngineService/ExecuteExceptionHandler',
                request_serializer=processflowengine__pb2.ExeExceptionHandlerRequest.SerializeToString,
                response_deserializer=processflowengine__pb2.GeneralResponse.FromString,
                )
        self.NextStation = channel.unary_unary(
                '/processflowengine.ProcessFlowEngineService/NextStation',
                request_serializer=processflowengine__pb2.NextStationRequest.SerializeToString,
                response_deserializer=processflowengine__pb2.WorkStationResponse.FromString,
                )
        self.ListActAggGroupByChain = channel.unary_unary(
                '/processflowengine.ProcessFlowEngineService/ListActAggGroupByChain',
                request_serializer=processflowengine__pb2.ListActAggRequest.SerializeToString,
                response_deserializer=processflowengine__pb2.MapActAggResponse.FromString,
                )
        self.ListActAgg = channel.unary_unary(
                '/processflowengine.ProcessFlowEngineService/ListActAgg',
                request_serializer=processflowengine__pb2.ListActAggRequest.SerializeToString,
                response_deserializer=processflowengine__pb2.ListActAggResponse.FromString,
                )
        self.ListActAggByContainer = channel.unary_unary(
                '/processflowengine.ProcessFlowEngineService/ListActAggByContainer',
                request_serializer=processflowengine__pb2.ListActAggContainerRequest.SerializeToString,
                response_deserializer=processflowengine__pb2.ListActAggResponse.FromString,
                )
        self.ListActAggByIds = channel.unary_unary(
                '/processflowengine.ProcessFlowEngineService/ListActAggByIds',
                request_serializer=processflowengine__pb2.ActAggIdsRequest.SerializeToString,
                response_deserializer=processflowengine__pb2.ListActAggResponse.FromString,
                )
        self.ListActAggByTask = channel.unary_unary(
                '/processflowengine.ProcessFlowEngineService/ListActAggByTask',
                request_serializer=processflowengine__pb2.TaskParamRequest.SerializeToString,
                response_deserializer=processflowengine__pb2.ListActAggResponse.FromString,
                )
        self.QueryContainerCtx = channel.unary_unary(
                '/processflowengine.ProcessFlowEngineService/QueryContainerCtx',
                request_serializer=processflowengine__pb2.ContainerCtxQueryRequest.SerializeToString,
                response_deserializer=processflowengine__pb2.ContainerCtxResponse.FromString,
                )
        self.ClearContainerCtxException = channel.unary_unary(
                '/processflowengine.ProcessFlowEngineService/ClearContainerCtxException',
                request_serializer=processflowengine__pb2.ContainerCtxQueryRequest.SerializeToString,
                response_deserializer=processflowengine__pb2.GeneralResponse.FromString,
                )
        self.sendCommandToTes = channel.unary_unary(
                '/processflowengine.ProcessFlowEngineService/sendCommandToTes',
                request_serializer=processflowengine__pb2.SendCommandRequest.SerializeToString,
                response_deserializer=processflowengine__pb2.GeneralResponse.FromString,
                )


class ProcessFlowEngineServiceServicer(object):
    """ProcessFlowEngine engine message channel
    """

    def CreateActionChain(self, request, context):
        """************invtransaction调用方法  开始**************************
        根据workOrder创建action
        """
        context.set_code(psgrpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NoticeWorkOrderChain(self, request, context):
        """通知workOrder依赖关系
        """
        context.set_code(psgrpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NoticeWorkOrderCancel(self, request, context):
        """通知workOrder取消
        """
        context.set_code(psgrpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateActionAgg(self, request, context):
        """根据WorkOrder生成actionAgg
        """
        context.set_code(psgrpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResetActAggByWO(self, request, context):
        """**************invtransaction调用方法  线束************************

        解除workOrder对应的actionAgg
        """
        context.set_code(psgrpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListWOByTask(self, request, context):
        """根据task查询对应的workOrder
        """
        context.set_code(psgrpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteCheck(self, request, context):
        """************station execute调用方法  开始**************************
        执行check action
        """
        context.set_code(psgrpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteLoadBalance(self, request, context):
        """执行LoadBalance action
        """
        context.set_code(psgrpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteChoice(self, request, context):
        """执行choice action
        """
        context.set_code(psgrpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteCounting(self, request, context):
        """执行Counting action
        """
        context.set_code(psgrpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteMove(self, request, context):
        """批量执行MoveAction
        """
        context.set_code(psgrpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchExecuteMove(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(psgrpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteIBLoad(self, request, context):
        """执行入库Load类型的action Agg
        """
        context.set_code(psgrpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteLoad(self, request, context):
        """执行Load类型的action Agg
        """
        context.set_code(psgrpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteExchange(self, request, context):
        """执行Exchange类型的action Agg
        """
        context.set_code(psgrpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteExchangeThenLoad(self, request, context):
        """执行Exchange类型的action Agg
        """
        context.set_code(psgrpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteLog(self, request, context):
        """日志记录
        """
        context.set_code(psgrpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteExceptionHandler(self, request, context):
        """异常处理
        """
        context.set_code(psgrpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NextStation(self, request, context):
        """获取下一个station
        """
        context.set_code(psgrpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListActAggGroupByChain(self, request, context):
        """************查询actAgg  开始**************************
        通用action agg查询,根据workOrder链分组
        """
        context.set_code(psgrpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListActAgg(self, request, context):
        """通用action agg查询
        """
        context.set_code(psgrpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListActAggByContainer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(psgrpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListActAggByIds(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(psgrpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListActAggByTask(self, request, context):
        """根据task查询对应的actAgg
        """
        context.set_code(psgrpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryContainerCtx(self, request, context):
        """查询ContainerContext
        """
        context.set_code(psgrpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClearContainerCtxException(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(psgrpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sendCommandToTes(self, request, context):
        """给tes设备下发指令
        """
        context.set_code(psgrpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ProcessFlowEngineServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateActionChain': psgrpc.unary_unary_rpc_method_handler(
                    servicer.CreateActionChain,
                    request_deserializer=processflowengine__pb2.CreateActionChainRequest.FromString,
                    response_serializer=processflowengine__pb2.GeneralResponse.SerializeToString,
            ),
            'NoticeWorkOrderChain': psgrpc.unary_unary_rpc_method_handler(
                    servicer.NoticeWorkOrderChain,
                    request_deserializer=processflowengine__pb2.WorkOrderChainRequest.FromString,
                    response_serializer=processflowengine__pb2.GeneralResponse.SerializeToString,
            ),
            'NoticeWorkOrderCancel': psgrpc.unary_unary_rpc_method_handler(
                    servicer.NoticeWorkOrderCancel,
                    request_deserializer=processflowengine__pb2.WorkOrderRequest.FromString,
                    response_serializer=processflowengine__pb2.GeneralResponse.SerializeToString,
            ),
            'CreateActionAgg': psgrpc.unary_unary_rpc_method_handler(
                    servicer.CreateActionAgg,
                    request_deserializer=processflowengine__pb2.CreateActionAggRequest.FromString,
                    response_serializer=processflowengine__pb2.GeneralResponse.SerializeToString,
            ),
            'ResetActAggByWO': psgrpc.unary_unary_rpc_method_handler(
                    servicer.ResetActAggByWO,
                    request_deserializer=processflowengine__pb2.WorkOrderRequest.FromString,
                    response_serializer=processflowengine__pb2.GeneralResponse.SerializeToString,
            ),
            'ListWOByTask': psgrpc.unary_unary_rpc_method_handler(
                    servicer.ListWOByTask,
                    request_deserializer=processflowengine__pb2.TaskParamRequest.FromString,
                    response_serializer=processflowengine__pb2.WorkOrderResponse.SerializeToString,
            ),
            'ExecuteCheck': psgrpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteCheck,
                    request_deserializer=processflowengine__pb2.ExeCheckRequest.FromString,
                    response_serializer=processflowengine__pb2.GeneralResponse.SerializeToString,
            ),
            'ExecuteLoadBalance': psgrpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteLoadBalance,
                    request_deserializer=processflowengine__pb2.ExeLoadBalanceRequest.FromString,
                    response_serializer=processflowengine__pb2.GeneralResponse.SerializeToString,
            ),
            'ExecuteChoice': psgrpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteChoice,
                    request_deserializer=processflowengine__pb2.ExeChoiceRequest.FromString,
                    response_serializer=processflowengine__pb2.GeneralResponse.SerializeToString,
            ),
            'ExecuteCounting': psgrpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteCounting,
                    request_deserializer=processflowengine__pb2.ExeCountingRequest.FromString,
                    response_serializer=processflowengine__pb2.GeneralResponse.SerializeToString,
            ),
            'ExecuteMove': psgrpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteMove,
                    request_deserializer=processflowengine__pb2.MoveActAgg.FromString,
                    response_serializer=processflowengine__pb2.GeneralResponse.SerializeToString,
            ),
            'BatchExecuteMove': psgrpc.unary_unary_rpc_method_handler(
                    servicer.BatchExecuteMove,
                    request_deserializer=processflowengine__pb2.BatchExecuteMoveRequest.FromString,
                    response_serializer=processflowengine__pb2.GeneralResponse.SerializeToString,
            ),
            'ExecuteIBLoad': psgrpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteIBLoad,
                    request_deserializer=processflowengine__pb2.ExeIBLoadRequest.FromString,
                    response_serializer=processflowengine__pb2.GeneralResponse.SerializeToString,
            ),
            'ExecuteLoad': psgrpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteLoad,
                    request_deserializer=processflowengine__pb2.ExeLoadRequest.FromString,
                    response_serializer=processflowengine__pb2.GeneralResponse.SerializeToString,
            ),
            'ExecuteExchange': psgrpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteExchange,
                    request_deserializer=processflowengine__pb2.ExeExchangeRequest.FromString,
                    response_serializer=processflowengine__pb2.GeneralResponse.SerializeToString,
            ),
            'ExecuteExchangeThenLoad': psgrpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteExchangeThenLoad,
                    request_deserializer=processflowengine__pb2.ExeExchangeThenLoadRequest.FromString,
                    response_serializer=processflowengine__pb2.GeneralResponse.SerializeToString,
            ),
            'ExecuteLog': psgrpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteLog,
                    request_deserializer=processflowengine__pb2.ExeLogRequest.FromString,
                    response_serializer=processflowengine__pb2.GeneralResponse.SerializeToString,
            ),
            'ExecuteExceptionHandler': psgrpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteExceptionHandler,
                    request_deserializer=processflowengine__pb2.ExeExceptionHandlerRequest.FromString,
                    response_serializer=processflowengine__pb2.GeneralResponse.SerializeToString,
            ),
            'NextStation': psgrpc.unary_unary_rpc_method_handler(
                    servicer.NextStation,
                    request_deserializer=processflowengine__pb2.NextStationRequest.FromString,
                    response_serializer=processflowengine__pb2.WorkStationResponse.SerializeToString,
            ),
            'ListActAggGroupByChain': psgrpc.unary_unary_rpc_method_handler(
                    servicer.ListActAggGroupByChain,
                    request_deserializer=processflowengine__pb2.ListActAggRequest.FromString,
                    response_serializer=processflowengine__pb2.MapActAggResponse.SerializeToString,
            ),
            'ListActAgg': psgrpc.unary_unary_rpc_method_handler(
                    servicer.ListActAgg,
                    request_deserializer=processflowengine__pb2.ListActAggRequest.FromString,
                    response_serializer=processflowengine__pb2.ListActAggResponse.SerializeToString,
            ),
            'ListActAggByContainer': psgrpc.unary_unary_rpc_method_handler(
                    servicer.ListActAggByContainer,
                    request_deserializer=processflowengine__pb2.ListActAggContainerRequest.FromString,
                    response_serializer=processflowengine__pb2.ListActAggResponse.SerializeToString,
            ),
            'ListActAggByIds': psgrpc.unary_unary_rpc_method_handler(
                    servicer.ListActAggByIds,
                    request_deserializer=processflowengine__pb2.ActAggIdsRequest.FromString,
                    response_serializer=processflowengine__pb2.ListActAggResponse.SerializeToString,
            ),
            'ListActAggByTask': psgrpc.unary_unary_rpc_method_handler(
                    servicer.ListActAggByTask,
                    request_deserializer=processflowengine__pb2.TaskParamRequest.FromString,
                    response_serializer=processflowengine__pb2.ListActAggResponse.SerializeToString,
            ),
            'QueryContainerCtx': psgrpc.unary_unary_rpc_method_handler(
                    servicer.QueryContainerCtx,
                    request_deserializer=processflowengine__pb2.ContainerCtxQueryRequest.FromString,
                    response_serializer=processflowengine__pb2.ContainerCtxResponse.SerializeToString,
            ),
            'ClearContainerCtxException': psgrpc.unary_unary_rpc_method_handler(
                    servicer.ClearContainerCtxException,
                    request_deserializer=processflowengine__pb2.ContainerCtxQueryRequest.FromString,
                    response_serializer=processflowengine__pb2.GeneralResponse.SerializeToString,
            ),
            'sendCommandToTes': psgrpc.unary_unary_rpc_method_handler(
                    servicer.sendCommandToTes,
                    request_deserializer=processflowengine__pb2.SendCommandRequest.FromString,
                    response_serializer=processflowengine__pb2.GeneralResponse.SerializeToString,
            ),
    }
    generic_handler = psgrpc.method_handlers_generic_handler(
            'processflowengine.ProcessFlowEngineService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ProcessFlowEngineService(object):
    """ProcessFlowEngine engine message channel
    """

    @staticmethod
    def CreateActionChain(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return psgrpc.experimental.unary_unary(request, target, '/processflowengine.ProcessFlowEngineService/CreateActionChain',
                                               processflowengine__pb2.CreateActionChainRequest.SerializeToString,
                                               processflowengine__pb2.GeneralResponse.FromString,
                                               options, channel_credentials,
                                               insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NoticeWorkOrderChain(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return psgrpc.experimental.unary_unary(request, target, '/processflowengine.ProcessFlowEngineService/NoticeWorkOrderChain',
                                               processflowengine__pb2.WorkOrderChainRequest.SerializeToString,
                                               processflowengine__pb2.GeneralResponse.FromString,
                                               options, channel_credentials,
                                               insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NoticeWorkOrderCancel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return psgrpc.experimental.unary_unary(request, target, '/processflowengine.ProcessFlowEngineService/NoticeWorkOrderCancel',
                                               processflowengine__pb2.WorkOrderRequest.SerializeToString,
                                               processflowengine__pb2.GeneralResponse.FromString,
                                               options, channel_credentials,
                                               insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateActionAgg(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return psgrpc.experimental.unary_unary(request, target, '/processflowengine.ProcessFlowEngineService/CreateActionAgg',
                                               processflowengine__pb2.CreateActionAggRequest.SerializeToString,
                                               processflowengine__pb2.GeneralResponse.FromString,
                                               options, channel_credentials,
                                               insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ResetActAggByWO(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return psgrpc.experimental.unary_unary(request, target, '/processflowengine.ProcessFlowEngineService/ResetActAggByWO',
                                               processflowengine__pb2.WorkOrderRequest.SerializeToString,
                                               processflowengine__pb2.GeneralResponse.FromString,
                                               options, channel_credentials,
                                               insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListWOByTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return psgrpc.experimental.unary_unary(request, target, '/processflowengine.ProcessFlowEngineService/ListWOByTask',
                                               processflowengine__pb2.TaskParamRequest.SerializeToString,
                                               processflowengine__pb2.WorkOrderResponse.FromString,
                                               options, channel_credentials,
                                               insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExecuteCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return psgrpc.experimental.unary_unary(request, target, '/processflowengine.ProcessFlowEngineService/ExecuteCheck',
                                               processflowengine__pb2.ExeCheckRequest.SerializeToString,
                                               processflowengine__pb2.GeneralResponse.FromString,
                                               options, channel_credentials,
                                               insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExecuteLoadBalance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return psgrpc.experimental.unary_unary(request, target, '/processflowengine.ProcessFlowEngineService/ExecuteLoadBalance',
                                               processflowengine__pb2.ExeLoadBalanceRequest.SerializeToString,
                                               processflowengine__pb2.GeneralResponse.FromString,
                                               options, channel_credentials,
                                               insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExecuteChoice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return psgrpc.experimental.unary_unary(request, target, '/processflowengine.ProcessFlowEngineService/ExecuteChoice',
                                               processflowengine__pb2.ExeChoiceRequest.SerializeToString,
                                               processflowengine__pb2.GeneralResponse.FromString,
                                               options, channel_credentials,
                                               insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExecuteCounting(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return psgrpc.experimental.unary_unary(request, target, '/processflowengine.ProcessFlowEngineService/ExecuteCounting',
                                               processflowengine__pb2.ExeCountingRequest.SerializeToString,
                                               processflowengine__pb2.GeneralResponse.FromString,
                                               options, channel_credentials,
                                               insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExecuteMove(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return psgrpc.experimental.unary_unary(request, target, '/processflowengine.ProcessFlowEngineService/ExecuteMove',
                                               processflowengine__pb2.MoveActAgg.SerializeToString,
                                               processflowengine__pb2.GeneralResponse.FromString,
                                               options, channel_credentials,
                                               insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BatchExecuteMove(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return psgrpc.experimental.unary_unary(request, target, '/processflowengine.ProcessFlowEngineService/BatchExecuteMove',
                                               processflowengine__pb2.BatchExecuteMoveRequest.SerializeToString,
                                               processflowengine__pb2.GeneralResponse.FromString,
                                               options, channel_credentials,
                                               insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExecuteIBLoad(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return psgrpc.experimental.unary_unary(request, target, '/processflowengine.ProcessFlowEngineService/ExecuteIBLoad',
                                               processflowengine__pb2.ExeIBLoadRequest.SerializeToString,
                                               processflowengine__pb2.GeneralResponse.FromString,
                                               options, channel_credentials,
                                               insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExecuteLoad(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return psgrpc.experimental.unary_unary(request, target, '/processflowengine.ProcessFlowEngineService/ExecuteLoad',
                                               processflowengine__pb2.ExeLoadRequest.SerializeToString,
                                               processflowengine__pb2.GeneralResponse.FromString,
                                               options, channel_credentials,
                                               insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExecuteExchange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return psgrpc.experimental.unary_unary(request, target, '/processflowengine.ProcessFlowEngineService/ExecuteExchange',
                                               processflowengine__pb2.ExeExchangeRequest.SerializeToString,
                                               processflowengine__pb2.GeneralResponse.FromString,
                                               options, channel_credentials,
                                               insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExecuteExchangeThenLoad(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return psgrpc.experimental.unary_unary(request, target, '/processflowengine.ProcessFlowEngineService/ExecuteExchangeThenLoad',
                                               processflowengine__pb2.ExeExchangeThenLoadRequest.SerializeToString,
                                               processflowengine__pb2.GeneralResponse.FromString,
                                               options, channel_credentials,
                                               insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExecuteLog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return psgrpc.experimental.unary_unary(request, target, '/processflowengine.ProcessFlowEngineService/ExecuteLog',
                                               processflowengine__pb2.ExeLogRequest.SerializeToString,
                                               processflowengine__pb2.GeneralResponse.FromString,
                                               options, channel_credentials,
                                               insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExecuteExceptionHandler(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return psgrpc.experimental.unary_unary(request, target, '/processflowengine.ProcessFlowEngineService/ExecuteExceptionHandler',
                                               processflowengine__pb2.ExeExceptionHandlerRequest.SerializeToString,
                                               processflowengine__pb2.GeneralResponse.FromString,
                                               options, channel_credentials,
                                               insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NextStation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return psgrpc.experimental.unary_unary(request, target, '/processflowengine.ProcessFlowEngineService/NextStation',
                                               processflowengine__pb2.NextStationRequest.SerializeToString,
                                               processflowengine__pb2.WorkStationResponse.FromString,
                                               options, channel_credentials,
                                               insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListActAggGroupByChain(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return psgrpc.experimental.unary_unary(request, target, '/processflowengine.ProcessFlowEngineService/ListActAggGroupByChain',
                                               processflowengine__pb2.ListActAggRequest.SerializeToString,
                                               processflowengine__pb2.MapActAggResponse.FromString,
                                               options, channel_credentials,
                                               insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListActAgg(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return psgrpc.experimental.unary_unary(request, target, '/processflowengine.ProcessFlowEngineService/ListActAgg',
                                               processflowengine__pb2.ListActAggRequest.SerializeToString,
                                               processflowengine__pb2.ListActAggResponse.FromString,
                                               options, channel_credentials,
                                               insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListActAggByContainer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return psgrpc.experimental.unary_unary(request, target, '/processflowengine.ProcessFlowEngineService/ListActAggByContainer',
                                               processflowengine__pb2.ListActAggContainerRequest.SerializeToString,
                                               processflowengine__pb2.ListActAggResponse.FromString,
                                               options, channel_credentials,
                                               insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListActAggByIds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return psgrpc.experimental.unary_unary(request, target, '/processflowengine.ProcessFlowEngineService/ListActAggByIds',
                                               processflowengine__pb2.ActAggIdsRequest.SerializeToString,
                                               processflowengine__pb2.ListActAggResponse.FromString,
                                               options, channel_credentials,
                                               insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListActAggByTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return psgrpc.experimental.unary_unary(request, target, '/processflowengine.ProcessFlowEngineService/ListActAggByTask',
                                               processflowengine__pb2.TaskParamRequest.SerializeToString,
                                               processflowengine__pb2.ListActAggResponse.FromString,
                                               options, channel_credentials,
                                               insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryContainerCtx(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return psgrpc.experimental.unary_unary(request, target, '/processflowengine.ProcessFlowEngineService/QueryContainerCtx',
                                               processflowengine__pb2.ContainerCtxQueryRequest.SerializeToString,
                                               processflowengine__pb2.ContainerCtxResponse.FromString,
                                               options, channel_credentials,
                                               insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ClearContainerCtxException(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return psgrpc.experimental.unary_unary(request, target, '/processflowengine.ProcessFlowEngineService/ClearContainerCtxException',
                                               processflowengine__pb2.ContainerCtxQueryRequest.SerializeToString,
                                               processflowengine__pb2.GeneralResponse.FromString,
                                               options, channel_credentials,
                                               insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sendCommandToTes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return psgrpc.experimental.unary_unary(request, target, '/processflowengine.ProcessFlowEngineService/sendCommandToTes',
                                               processflowengine__pb2.SendCommandRequest.SerializeToString,
                                               processflowengine__pb2.GeneralResponse.FromString,
                                               options, channel_credentials,
                                               insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
